import sdl { SDL }
import video { draw_frame }
import system { System }
import cpu { CPU }
import debugger { Debugger }
import joypad { Joypad }

function main(args: [String]) {
    mut sdl = SDL::construct()
    sdl.init_video(width: 256 * 2, height: 240 * 2)
    sdl.set_scale(scale: 2.0f32)

    guard args.size() > 1 else {
        eprintln("usage: jakt_nes <rom file>")
        return 1
    }

    let filename = args[1]

    mut system = System::init(filename)

    match system {
        Success(system) => {
            mut cpu = CPU::init(system)
            mut debugger = Debugger::init(cpu)
            mut joypad = system.joypad

            loop {
                let in_vblank_before = system.ppu.in_vblank

                let cpu_clocks_before = cpu.clock
                cpu.run_opcode()
                let cpu_clocks_after = cpu.clock

                mut ppu = system.ppu
                ppu.tick(cycles: (cpu_clocks_after - cpu_clocks_before) * 3)
                let in_vblank_after = system.ppu.in_vblank

                if not in_vblank_before and in_vblank_after {
                    // We're just now in the vblank
                    draw_frame(sdl, buffer: ppu.video_buffer)
                    mut event = sdl.poll_event()
                    if event.has_value() {
                        match event! {
                            Quit => {
                                break
                            }
                            KeyDown(key) => {
                                match key {
                                    Up => {
                                        joypad.press_up()
                                    }
                                    Down => {
                                        joypad.press_down()
                                    }
                                    Left => {
                                        joypad.press_left()
                                    }
                                    Right => {
                                        joypad.press_right()
                                    }
                                    Return => {
                                        joypad.press_start()
                                    }
                                    Tab => {
                                        joypad.press_select()
                                    }
                                    Z => {
                                        joypad.press_a()
                                    }
                                    X => {
                                        joypad.press_b()
                                    }
                                }
                            }
                            KeyUp(key) => {
                                match key {
                                    Up => {
                                        joypad.release_up()
                                    }
                                    Down => {
                                        joypad.release_down()
                                    }
                                    Left => {
                                        joypad.release_left()
                                    }
                                    Right => {
                                        joypad.release_right()
                                    }
                                    Return => {
                                        joypad.release_start()
                                    }
                                    Tab => {
                                        joypad.release_select()
                                    }
                                    Z => {
                                        joypad.release_a()
                                    }
                                    X => {
                                        joypad.release_b()
                                    }
                                }
                            }
                        }
                    }
                }
            
                if not in_vblank_before and in_vblank_after and ppu.nmi_on_vblank {
                    // println("==NMI==")
                    cpu.nmi()
                }
            }
        }
        Error(msg) => {
            eprintln("Error: {}", msg)
            sdl.quit()
            return 2
        }
    }

    sdl.quit()
    return 0
}