import sdl { SDL }
import video { draw_frame }
import system { System }
import cpu { CPU }
import debugger { Debugger }
import joypad { Joypad }

function main(args: [String]) {
    mut sdl = SDL::construct()
    sdl.init_video(width: 256 * 2, height: 240 * 2)
    sdl.set_scale(scale: 2.0f32)

    guard args.size() > 1 else {
        eprintln("usage: jakt_nes <rom file>")
        return 1
    }

    let filename = args[1]

    mut system = System::init(filename)

    match system {
        Success(sys) => {
            mut system = sys
            mut cpu = CPU::init(system)
            mut debugger = Debugger::init(cpu)
            mut joypad = system.joypad
            mut ppu = system.ppu
            mut clock_pause: bool = false
            mut one_frame: bool = false
            mut slow_mode: bool = false
            eprintln("Debugging keys\n--------------")
            eprintln("D - hold to dump current CPU info\nH - toggle CPU halt\nJ - When halted, run single frame\nL - toggle slow mode")

            mut event = sdl.poll_event()
            loop {
                if event.has_value() {
                    match event! {
                        Quit => {
                            break
                        }
                        KeyDown(key) => {
                            match key {
                                Up => {
                                    joypad.press_up()
                                }
                                Down => {
                                    joypad.press_down()
                                }
                                Left => {
                                    joypad.press_left()
                                }
                                Right => {
                                    joypad.press_right()
                                }
                                Return => {
                                    joypad.press_start()
                                }
                                Tab => {
                                    joypad.press_select()
                                }
                                Z => {
                                    joypad.press_a()
                                }
                                X => {
                                    joypad.press_b()
                                }
                                D => {
                                    system.debug_enable()
                                }
                                H => {}
                                J => {}
                                L => {}
                            }
                        }
                        KeyUp(key) => {
                            match key {
                                Up => {
                                    joypad.release_up()
                                }
                                Down => {
                                    joypad.release_down()
                                }
                                Left => {
                                    joypad.release_left()
                                }
                                Right => {
                                    joypad.release_right()
                                }
                                Return => {
                                    joypad.release_start()
                                }
                                Tab => {
                                    joypad.release_select()
                                }
                                Z => {
                                    joypad.release_a()
                                }
                                X => {
                                    joypad.release_b()
                                }
                                D => {
                                    system.debug_disable()
                                }
                                H => {
                                    clock_pause = not clock_pause
                                    eprintln("Clock pause: {}", clock_pause)
                                }
                                J => {
                                    if clock_pause {
                                        one_frame = true
                                        eprintln("Executing single frame")
                                    }
                                }
                                L => {
                                    slow_mode = not slow_mode
                                    eprintln("Slow clock mode: {}", slow_mode)
                                }
                            }
                        }
                    }
                }
                event = None

                if one_frame {
                    if nesclock(system, cpu, debugger, sdl) {
                        event = sdl.poll_event()
                    }
                    one_frame = false
                }
                if slow_mode {
                    if nesclock(system, cpu, debugger, sdl) {
                        event = sdl.poll_event()
                    }
                    sdl.delay(1u32)
                }
                if not clock_pause and not slow_mode {
                    if nesclock(system, cpu, debugger, sdl) {
                        event = sdl.poll_event()
                    }
                } else {
                    event = sdl.poll_event()
                }
            }
        }
        Error(msg) => {
            eprintln("Error: {}", msg)
            sdl.quit()
            return 2
        }
    }

    sdl.quit()
    return 0
}

function nesclock (mut system: System, mut cpu: CPU, mut debugger: Debugger, mut sdl: SDL) throws -> bool {
    let in_vblank_before = system.ppu.in_vblank
    mut next_frame = false

    let cpu_clocks_before = cpu.clock
    cpu.run_opcode()
    let cpu_clocks_after = cpu.clock

    if system.debug {
        debugger.dump_cpu_state()
    }

    system.ppu.tick(cycles: (cpu_clocks_after - cpu_clocks_before) * 3)
    let in_vblank_after = system.ppu.in_vblank

    if not in_vblank_before and in_vblank_after {
        // We're just now in the vblank
        draw_frame(sdl, buffer: system.ppu.video_buffer)
        next_frame = true
    }

    if not in_vblank_before and in_vblank_after and system.ppu.nmi_on_vblank {
        // println("==NMI==")
        cpu.nmi()
    }

    return next_frame
}