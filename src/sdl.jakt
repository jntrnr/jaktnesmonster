import extern c "SDL.h" {
    extern struct SDL_Renderer {}
    extern struct SDL_Window {}

    extern function SDL_SetMainReady() -> void
    extern function SDL_Init(flags: u32) -> c_int
    extern function SDL_CreateWindowAndRenderer(width: c_int
                                                height: c_int
                                                window_flags: u32
                                                window: raw raw SDL_Window
                                                renderer: raw raw SDL_Renderer) -> c_int
    extern function SDL_SetRenderDrawColor(renderer: raw SDL_Renderer, r: u8, g: u8, b: u8, a: u8) -> c_int
    extern function SDL_RenderClear(renderer: raw SDL_Renderer) -> c_int
    extern function SDL_RenderPresent(renderer: raw SDL_Renderer) -> c_int
    extern function SDL_RenderDrawPoint(renderer: raw SDL_Renderer, x: c_int, y: c_int) -> c_int
    extern function SDL_RenderSetScale(renderer: raw SDL_Renderer, scaleX: f32, scaleY: f32) -> c_int
    extern function SDL_DestroyRenderer(renderer: raw SDL_Renderer) -> void
    extern function SDL_DestroyWindow(window: raw SDL_Window) -> void
    extern function SDL_Quit() -> void
    extern function SDL_Delay(ms: u32) -> void
}

enum Key {
    Up
    Down
    Left
    Right
    Return
    Z
    X
    Tab
    D
    H
    J
    L
}

enum SDLEvent {
    Quit
    KeyDown(key: Key)
    KeyUp(key: Key)
}

// TODO: nullptr constant anyone?
function null<T>() -> raw T {
    unsafe {
        cpp {
            "return nullptr;"
        }
    }
    abort()
}

class SDL {
    renderer: raw SDL_Renderer
    window: raw SDL_Window

    public function construct() throws -> SDL {
        return SDL(renderer: null<SDL_Renderer>(), window: null<SDL_Window>())
    }

    public function init_video(mut this, width: i64, height: i64) {
        let sdl_init_video : u32 = 0x20
        unsafe {
            SDL_SetMainReady();
            SDL_Init(flags: sdl_init_video);
            SDL_CreateWindowAndRenderer(width: width as! c_int
                                        height: height as! c_int
                                        window_flags: 0
                                        window: &raw .window
                                        renderer: &raw .renderer)
        }
    }

    public function set_scale(this, scale: f32) -> c_int {
        unsafe {
            return SDL_RenderSetScale(renderer: .renderer, scaleX: scale, scaleY: scale)
        }
    }

    public function set_render_draw_color(this, red: u8, green: u8, blue: u8, alpha: u8) {
        unsafe {
            SDL_SetRenderDrawColor(renderer: .renderer, r: red, g: green, b: blue, a: alpha);
        }
    }

    public function render_clear(this) {
        unsafe {
            SDL_RenderClear(renderer: .renderer)
        }
    }

    public function render_draw_point(this, x: u64, y: u64) {
        unsafe {
            SDL_RenderDrawPoint(renderer: .renderer, x: x as! c_int, y: y as! c_int);
        }
    }

    public function render_present(this) {
        unsafe {
            SDL_RenderPresent(renderer: .renderer)
        }
    }

    public function poll_event(this) -> SDLEvent? {
        unsafe {
            cpp {
                "SDL_Event event;
                const int has_event = SDL_PollEvent(&event);
                if (has_event && event.type == SDL_QUIT) {
                    const Optional<SDLEvent> event = typename SDLEvent::Quit();
                    return event;
                } else if (has_event && event.type == SDL_KEYDOWN) {
                    if (event.key.keysym.scancode == SDL_SCANCODE_UP) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyDown(typename Key::Up());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_DOWN) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyDown(typename Key::Down());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_LEFT) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyDown(typename Key::Left());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_RIGHT) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyDown(typename Key::Right());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_TAB) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyDown(typename Key::Tab());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_RETURN) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyDown(typename Key::Return());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_Z) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyDown(typename Key::Z());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_X) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyDown(typename Key::X());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_D) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyDown(typename Key::D());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_H) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyDown(typename Key::H());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_J) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyDown(typename Key::J());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_L) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyDown(typename Key::L());
                        return event;
                    }
                } else if (has_event && event.type == SDL_KEYUP) {
                    if (event.key.keysym.scancode == SDL_SCANCODE_UP) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyUp(typename Key::Up());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_DOWN) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyUp(typename Key::Down());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_LEFT) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyUp(typename Key::Left());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_RIGHT) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyUp(typename Key::Right());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_TAB) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyUp(typename Key::Tab());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_RETURN) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyUp(typename Key::Return());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_Z) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyUp(typename Key::Z());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_X) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyUp(typename Key::X());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_D) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyUp(typename Key::D());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_H) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyUp(typename Key::H());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_J) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyUp(typename Key::J());
                        return event;
                    } else if (event.key.keysym.scancode == SDL_SCANCODE_L) {
                        const Optional<SDLEvent> event = typename SDLEvent::KeyUp(typename Key::L());
                        return event;
                    }
                }"
            }
        }

        return None
    }

    public function quit(this) {
        unsafe {
            SDL_DestroyRenderer(renderer: .renderer)
            SDL_DestroyWindow(window: .window)
            SDL_Quit()
        }
    }

    public function delay(this, anon ms:u32) {
        unsafe {
            SDL_Delay(ms)
        }
    }
}
