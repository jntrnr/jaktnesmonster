import ppu { PPU }
import apu { APU }
import cart { load_cart, Cart, Mirroring }
import joypad { Joypad }

enum SystemLoadStatus {
    Success(System)
    Error(String)
}

class System {
    scratch_ram: [u8]
    prg_ram: [u8]
    public ppu: PPU
    apu: APU
    public cart: Cart
    public joypad: Joypad
    public debug: bool
    public audio_clock: f64
    public audio_buffer: [i16]
    public prg_rom_bank_0: usize
    public prg_rom_bank_1: usize
    public mapper_1_shift_register: u8
    public mapper_1_bit_count: u8
    public mapper_1_prg_rom_bank_mode: u8
    public mapper_1_chr_rom_bank_mode: u8

    public function init(filename: String) throws -> SystemLoadStatus {
        let status = load_cart(filename)
        guard status is Success(cart) else {
            return SystemLoadStatus::Error("not a valid ROM file")
        }

        return SystemLoadStatus::Success(
            System(
                scratch_ram: [0u8; 0x800]
                prg_ram: [0u8; 0x2000]
                ppu: PPU::init(
                    chr_rom_pages: cart.chr_rom_pages
                    mirroring: cart.mirroring
                )
                apu: APU::init()
                cart
                joypad: Joypad::init()
                debug: false
                audio_clock: 0.0
                audio_buffer: [0i16; 44100 / 60]
                prg_rom_bank_0: 0
                prg_rom_bank_1: cart.prg_rom_pages.size() - 1
                mapper_1_shift_register: 0
                mapper_1_bit_count: 0
                mapper_1_prg_rom_bank_mode: 3
                mapper_1_chr_rom_bank_mode: 0
            )
        )
    }

    function mapper_read_byte(this, address: u16) -> u8 {
        if address >= 0x8000 and address <= 0xbfff {
            return .cart.prg_rom_pages[.prg_rom_bank_0][address - 0x8000]
        } else if address >= 0xc000 {
            return .cart.prg_rom_pages[.prg_rom_bank_1][address - 0xc000]
        } else if address >= 0x6000 and address < 0x8000 {
            return .prg_ram[address - 0x6000]
        } else {
            println("we should not be here: mapper_read_byte of {:0>4x}", address)
            abort()
            // return 0
        }
    }

    function mapper_write_byte(mut this, address: u16, value: u8) {
        // eprintln("Write of {:0>2x} to {:0>4x}", value, address)
        if (.cart.mapper == 2) {
            .prg_rom_bank_0 = (value & 7) as! usize
            return
        }
        if (value & 0b1000_0000) == 0b1000_0000 {
            .mapper_1_shift_register = 0
            .mapper_1_bit_count = 0
        } else {
            .mapper_1_shift_register |= (value & 0x1) << (.mapper_1_bit_count)
            .mapper_1_bit_count++

            if .mapper_1_bit_count == 5 {
                // Do something here
                // eprintln("Write of {:0>2x} to {:0>4x}", .mapper_1_shift_register, address)

                if address >= 0x8000 and address <= 0x9fff {
                    // Control register
                    try {
                        .mapper_1_control(data: .mapper_1_shift_register)
                    } catch {

                    }
                } else if address >= 0xa000 and address <= 0xbfff {
                    .mapper_1_chr_rom_bank_switch0(data: .mapper_1_shift_register)
                } else if address >= 0xc000 and address <= 0xdfff {
                    .mapper_1_chr_rom_bank_switch1(data: .mapper_1_shift_register)
                } else if address >= 0xe000 and address <= 0xffff {
                    .mapper_1_prg_rom_bank_switch(data: .mapper_1_shift_register)
                }

                .mapper_1_bit_count = 0
                .mapper_1_shift_register = 0
            }
        }
    }

    public function mapper_1_control(mut this, data: u8) throws {
        if (data & 0x3) == 0x3 {
            // Exchange the screens
            // Vertical mirroring -> Horizontal Mirroring
            // Horizonal
            // 0x2000 -> 0x2400, 0x2800 -> 0x2C00
            // Vertical
            // 0x2000 -> 0x2800, 0x2400 -> 0x2C00

            if .ppu.mirroring is Vertical {
                mut buffer = [0u8; 0x400]
                // 0x2800 -> 0x2400
                for x in 0..0x400 {
                    buffer[x] = .ppu.vram[0x2800 + x]
                }
                for x in 0..0x400 {
                    .ppu.vram[0x2c00 + x] = .ppu.vram[0x2400 + x]
                    .ppu.vram[0x2400 + x] = buffer[x]
                }
            }

            .ppu.mirroring = Mirroring::Horizontal
        } else if (data & 0x2) == 0x2 {
            if .ppu.mirroring is Horizontal {
                mut buffer = [0u8; 0x400]
                // 0x2400 -> 0x2800
                for x in 0..0x400 {
                    buffer[x] = .ppu.vram[0x2400 + x]
                }
                for x in 0..0x400 {
                    .ppu.vram[0x2c00 + x] = .ppu.vram[0x2800 + x]
                    .ppu.vram[0x2800 + x] = buffer[x]
                }
            }

            .ppu.mirroring = Mirroring::Vertical
        } else {
            eprintln("Unsupported mirroring requested")
            // abort()
        }

        .mapper_1_prg_rom_bank_mode = (data >> 2) & 0x3
        .mapper_1_chr_rom_bank_mode = (data >> 4)
    }

    public function mapper_1_chr_rom_bank_switch0(mut this, data: u8) {
        if .mapper_1_chr_rom_bank_mode == 0 {
            let byte = data & 0x1e
            .ppu.chr_rom_page_0000 = byte as! usize
            .ppu.chr_rom_page_1000 = byte as! usize + 1
        } else {
            let byte = data & 0x1f
            .ppu.chr_rom_page_0000 = byte as! usize
        }
    }

    public function mapper_1_chr_rom_bank_switch1(mut this, data: u8) {
        let byte = data & 0x1f
        .ppu.chr_rom_page_1000 = data as! usize
    }

    public function mapper_1_prg_rom_bank_switch(mut this, data: u8) {
        if .mapper_1_prg_rom_bank_mode == 2 {
            // Switching 0xc000
            let page = data & 0b1111
            .prg_rom_bank_1 = data as! usize
        } else if .mapper_1_prg_rom_bank_mode == 3 {
            // Switching 0x8000
            let page = data & 0b1111
            .prg_rom_bank_0 = page as! usize
        } else {
            let page = data & 0b1110
            .prg_rom_bank_0 = page as! usize
            .prg_rom_bank_1 = (page + 1) as! usize
        }
    }

    public function read_byte(mut this, address: u16) -> u8 {
        if address < 0x2000 {
            return .scratch_ram[address & 0x7ff]
        } else if address < 0x4000 {
            return .ppu.read_ppu_addr(address)
        } else if address == 0x4016 {
            return .joypad.read_joypad()
        } else if address < 0x4020 {
            return .apu.read_apu_addr(address)
        } else if address >= 0x6000 and address < 0x8000 {
            return .prg_ram[address - 0x6000]
        } else {
            return .mapper_read_byte(address)
        }
    }

    public function read_word(mut this, address: u16) -> u16 {
        mut output = 0u16
        output += .read_byte(address: address + 1) as! u16
        output = output << 8

        output += .read_byte(address) as! u16

        return output
    }

    public function read_word_wrapped(mut this, address: u16) -> u16 {
        mut addr = address
        let address_l = .read_byte(address: addr)

        let indirect_address_h = address >> 8
        // TODO: should this be an unchecked_add?
        addr += 1
        addr = (indirect_address_h << 8) + (addr & 0xff)

        let address_h = .read_byte(address: addr)

        return (address_h as! u16 << 8) + (address_l as! u16)
    }

    public function write_byte(mut this, address: u16, value: u8) {
        if address < 0x2000 {
            .scratch_ram[address & 0x7ff] = value
        } else if address < 0x4000 {
            .ppu.write_ppu_addr(address, value)
        } else if address == 0x4014 {
            .oam_dma(value)
            try {
                .ppu.dma_tick()
            } catch {}
        } else if address == 0x4016 {
            if (value & 0x1) == 0x1 {
                .joypad.poll_joypad()
            }
        } else if address < 0x4020 {
            .apu.write_apu_addr(address, value)
        } else if address >= 0x6000 and address <= 0x7fff {
            .prg_ram[address - 0x6000] = value
        } else {
            .mapper_write_byte(address, value)
        }
    }

    public function oam_dma(mut this, value: u8) {
        let address = 0x100u16 * (value as! u16)

        for addr in address..(address + 256) {
            .ppu.oam[addr - address] = .read_byte(address: addr)
        }

        .ppu.oam_addr_write(value: 0x00)

        // println("{}", .ppu.oam)
    }

    public function debug_enable(mut this) {
        .debug = true
    }

    public function debug_disable(mut this) {
        .debug = false
    }
}
